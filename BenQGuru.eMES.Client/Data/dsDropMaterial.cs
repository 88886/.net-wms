//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BenQGuru.eMES.Client.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsDropMaterial : DataSet {
        
        private DropInnoDataTable tableDropInno;
        
        public dsDropMaterial() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsDropMaterial(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DropInno"] != null)) {
                    this.Tables.Add(new DropInnoDataTable(ds.Tables["DropInno"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DropInnoDataTable DropInno {
            get {
                return this.tableDropInno;
            }
        }
        
        public override DataSet Clone() {
            dsDropMaterial cln = ((dsDropMaterial)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DropInno"] != null)) {
                this.Tables.Add(new DropInnoDataTable(ds.Tables["DropInno"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDropInno = ((DropInnoDataTable)(this.Tables["DropInno"]));
            if ((this.tableDropInno != null)) {
                this.tableDropInno.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsDropMaterial";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsDropMaterial.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDropInno = new DropInnoDataTable();
            this.Tables.Add(this.tableDropInno);
        }
        
        private bool ShouldSerializeDropInno() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DropInnoRowChangeEventHandler(object sender, DropInnoRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DropInnoDataTable : DataTable, System.Collections.IEnumerable {

            private DataColumn columnCheck;

            private DataColumn columnIndex;
            
            private DataColumn columnItemCode;

            private DataColumn columnPackedNo;
            
            private DataColumn columnItemDesc;

            private DataColumn columnNewBarcode;
            
            internal DropInnoDataTable() : 
                    base("DropInno") {
                this.InitClass();
            }
            
            internal DropInnoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            internal DataColumn CheckColumn
            {
                get
                {
                    return this.columnCheck;
                }
            }
            
            internal DataColumn IndexColumn {
                get {
                    return this.columnIndex;
                }
            }
            
            internal DataColumn ItemCodeColumn {
                get {
                    return this.columnItemCode;
                }
            }
            
            internal DataColumn PackedNoColumn {
                get {
                    return this.columnPackedNo;
                }
            }
            
            internal DataColumn ItemDescColumn {
                get {
                    return this.columnItemDesc;
                }
            }

            internal DataColumn NewBarcodeColumn
            {
                get
                {
                    return this.columnNewBarcode;
                }
            }
            
            public DropInnoRow this[int index] {
                get {
                    return ((DropInnoRow)(this.Rows[index]));
                }
            }
            
            public event DropInnoRowChangeEventHandler DropInnoRowChanged;
            
            public event DropInnoRowChangeEventHandler DropInnoRowChanging;
            
            public event DropInnoRowChangeEventHandler DropInnoRowDeleted;
            
            public event DropInnoRowChangeEventHandler DropInnoRowDeleting;
            
            public void AddDropInnoRow(DropInnoRow row) {
                this.Rows.Add(row);
            }

            public DropInnoRow AddDropInnoRow(bool Check, long Index, string ItemCode, string PackedNo, string ItemDesc, string NewBarcode)
            {
                DropInnoRow rowDropInnoRow = ((DropInnoRow)(this.NewRow()));
                rowDropInnoRow.ItemArray = new object[] {
                    Check,    
                    Index,
                    ItemCode,
                    PackedNo,
                    ItemDesc,
                    NewBarcode};
                this.Rows.Add(rowDropInnoRow);
                return rowDropInnoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DropInnoDataTable cln = ((DropInnoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DropInnoDataTable();
            }
            
            internal void InitVars() {
                this.columnCheck = this.Columns["Check"];
                this.columnIndex = this.Columns["Index"];
                this.columnItemCode = this.Columns["ItemCode"];
                this.columnPackedNo = this.Columns["PackedNo"];
                this.columnItemDesc = this.Columns["ItemDesc"];
                this.columnNewBarcode = this.Columns["NewBarcode"];
            }
            
            private void InitClass() {
                this.columnCheck = new DataColumn("Check", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheck);
                this.columnIndex = new DataColumn("Index", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIndex);
                this.columnItemCode = new DataColumn("ItemCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemCode);
                this.columnPackedNo = new DataColumn("PackedNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPackedNo);
                this.columnItemDesc = new DataColumn("ItemDesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemDesc);
                this.columnNewBarcode = new DataColumn("NewBarcode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNewBarcode);

                this.columnCheck.AllowDBNull = false;
                this.columnCheck.ReadOnly = true;
                this.columnCheck.Caption = "";
                this.columnIndex.AllowDBNull = false;
                this.columnIndex.ReadOnly = true;
                this.columnIndex.Caption = "顺序号";
                this.columnItemCode.AllowDBNull = false;
                this.columnItemCode.ReadOnly = true;
                this.columnItemCode.Caption = "物料代码";
                this.columnPackedNo.AllowDBNull = false;
                this.columnPackedNo.Caption = "最小包装条码";
                this.columnPackedNo.ReadOnly = true;
                this.columnItemDesc.AllowDBNull = false;
                this.columnItemDesc.ReadOnly = true;
                this.columnItemDesc.Caption = "物料描述";
                this.columnNewBarcode.AllowDBNull = false;
                this.columnNewBarcode.ReadOnly = true;
                this.columnNewBarcode.Caption = "新条码";
            }
            
            public DropInnoRow NewDropInnoRow() {
                return ((DropInnoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DropInnoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DropInnoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DropInnoRowChanged != null)) {
                    this.DropInnoRowChanged(this, new DropInnoRowChangeEvent(((DropInnoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DropInnoRowChanging != null)) {
                    this.DropInnoRowChanging(this, new DropInnoRowChangeEvent(((DropInnoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DropInnoRowDeleted != null)) {
                    this.DropInnoRowDeleted(this, new DropInnoRowChangeEvent(((DropInnoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DropInnoRowDeleting != null)) {
                    this.DropInnoRowDeleting(this, new DropInnoRowChangeEvent(((DropInnoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDropInnoRow(DropInnoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DropInnoRow : DataRow {
            
            private DropInnoDataTable tableDropInno;
            
            internal DropInnoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDropInno = ((DropInnoDataTable)(this.Table));
            }

            public bool Check
            {
                get
                {
                    return ((bool)(this[this.tableDropInno.CheckColumn]));
                }
                set
                {
                    this[this.tableDropInno.CheckColumn] = value;
                }
            }
            
            public long Index {
                get {
                    return ((long)(this[this.tableDropInno.IndexColumn]));
                }
                set {
                    this[this.tableDropInno.IndexColumn] = value;
                }
            }
            
            public string ItemCode {
                get {
                    return ((string)(this[this.tableDropInno.ItemCodeColumn]));
                }
                set {
                    this[this.tableDropInno.ItemCodeColumn] = value;
                }
            }
            
            public string PackedNo {
                get {
                    return ((string)(this[this.tableDropInno.PackedNoColumn]));
                }
                set {
                    this[this.tableDropInno.PackedNoColumn] = value;
                }
            }

            public string ItemDesc
            {
                get {
                    return ((string)(this[this.tableDropInno.ItemDescColumn]));
                }
                set {
                    this[this.tableDropInno.ItemDescColumn] = value;
                }
            }

            public string NewBarcode
            {
                get
                {
                    return ((string)(this[this.tableDropInno.NewBarcodeColumn]));
                }
                set
                {
                    this[this.tableDropInno.NewBarcodeColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DropInnoRowChangeEvent : EventArgs {
            
            private DropInnoRow eventRow;
            
            private DataRowAction eventAction;
            
            public DropInnoRowChangeEvent(DropInnoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DropInnoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
